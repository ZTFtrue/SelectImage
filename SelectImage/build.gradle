buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.1.3"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

repositories {
    jcenter()
}

group = 'com.bintray.example'
version = '1.0'

apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}


// 定义参数
def gitUrl = 'https://github.com/ZTFtrue/SelectImage.git'   // Git仓库的url
def groupIdDefined = "com.ztftrue.android"
def artifactIdDefined = "selectImage"
def versionDefined = "0.0.1"
def bintrayUser = project.hasProperty('bintrayUser')?bintrayUser:""
def bintrayKey = project.hasProperty('bintrayKey')?bintrayKey:""

// bintray平台信息配置
bintray {
    key "$bintrayKey"
    user "$bintrayUser"
    publications = ['MyPublication'] // 'MyPublication'与下面的publishing闭包里的名称对应
    publish = true // 上传后立即发布到Bintray平台
    pkg {
        repo = "android"  // 必填。bintray平台仓库名，必须已经创建过。
        name = "selectImage"  // 必填。仓库里包package的名称，没有的话会自动创建。
        licenses = ["Apache-2.0"] // 首次创建package则必须，否则选填。
        vcsUrl = gitUrl // 首次创建package则必须，否则选填。
        version {
            name = "$versionDefined"
        }
    }
}
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // The following applies a component to this publication
                // which results in publishing an app bundle.
                from components.release
                groupId "$groupIdDefined"
                artifactId "$artifactIdDefined"
                version "$versionDefined"
            }
            debug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.debug

                groupId "$groupIdDefined"
                artifactId "$artifactIdDefined"
                version "$versionDefined"
            }
            MyPublication(MavenPublication) {
                artifact("$buildDir/outputs/aar/SelectImage-release.aar")
                artifact sourcesJar
                artifact javadocJar
                groupId "$groupIdDefined"
                artifactId "$artifactIdDefined"
                version "$versionDefined"
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included in the pom.
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }

        }
       /*  自定义仓库
       repositories {
            maven {
                name "custom"
                url "../repo"
            }
        }*/
    }
}
// 生成sourceJar和javaDocJar构件
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'

    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
}